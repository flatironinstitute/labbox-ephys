{
	// Place your labbox-ephys workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"extension": {
		"prefix": "extension",
		"body": [
            "// LABBOX-EXTENSION: ${1: name}",
            "// LABBOX-EXTENSION-TAGS: jupyter",
			"",
			"import React from 'react';",
			"import { ExtensionContext } from '../pluginInterface",
			"",
			"// Use recordingview or sortingview snippet to insert a recording or sorting view (better to put it in a separate file)",
			"",
			"export function activate(context: ExtensionContext) {",
			"    // Use registerrecordingview or registersortingview snippet to insert a recording or sorting view",
			"    $0",
			"}"
		],
		"description": ""
	},
	"recordingview": {
        "prefix": "recordingview",
        "body": [
			"const ${1: ClassName}: FunctionComponent<RecordingViewProps> = ({recording}) => {",
			"    $0",
            "    return (",
            "        <div>",
            "            Example recording view. Recording ID: {recording.recordingId}",
            "        </div>",
            "    )",
            "}"
        ],
        "description": ""
    },
    "sortingview": {
        "prefix": "sortingview",
        "body": [
			"const ${1: ClassName}: FunctionComponent<SortingViewProps> = ({recording, sorting}) => {",
			"    $0",
            "    return (",
            "        <div>",
            "            Example sorting view. Sorting ID: {sorting.sortingId}",
            "        </div>",
            "    )",
            "}"
        ],
        "description": ""
	},
	"registerrecordingview": {
        "prefix": "registerrecordingview",
        "body": [
            "context.registerRecordingView({",
            "    name: '${1: Name}',",
            "    label: '${2: label}',",
            "    priority: 50,",
            "    component: ${3: ComponentName}",
            "})"
        ],
        "description": ""
    },
    "registersortingview": {
        "prefix": "registersortingview",
        "body": [
            "context.registerSortingView({",
            "    name: '${1: Name}',",
            "    label: '${2: label}',",
            "    priority: 50,",
            "    component: ${3: ComponentName}",
            "})"
        ],
        "description": ""
	},
	"container": {
        "prefix": "container",
        "body": [
            "import React, { Dispatch, FunctionComponent } from 'react';",
            "import { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';",
            "import { RootAction, RootState } from '../reducers';",
            "",
            "interface StateProps {",
            "}",
            "",
            "interface DispatchProps {",
            "}",
            "",
            "interface OwnProps {",
            "    exampleProp: number",
            "}",
            "",
            "type Props = StateProps & DispatchProps & OwnProps",
            "",
            "const ${1: ComponentName}: FunctionComponent<Props> = ({ exampleProp }) => {",
            "    return <div>${1: ComponentName}: {exampleProp}</div>",
            "}",
            "",
            "const mapStateToProps: MapStateToProps<StateProps, OwnProps, RootState> = (state: RootState, ownProps: OwnProps): StateProps => ({",
            "})",
            "  ",
            "const mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = (dispatch: Dispatch<RootAction>, ownProps: OwnProps) => ({",
            "})",
            "",
            "export default connect<StateProps, DispatchProps, OwnProps, RootState>(",
            "    mapStateToProps,",
            "    mapDispatchToProps",
            ")(${1: ComponentName})"
        ],
        "description": ""
    },
    "component": {
        "prefix": "component",
        "body": [
            "import React, { FunctionComponent } from 'react';",
            "",
            "type Props = {",
            "    $0",
            "    exampleProp: number",
            "}",
            "",
            "const ${1: ComponentName}: FunctionComponent<Props> = ({ exampleProp }) => {",
            "    return <div>${1: ComponentName}: {exampleProp}</div>",
            "}",
            "",
            "export default ${1: ComponentName}"
        ],
        "description": ""
    },
    "canvaswidgetlayer": {
        "prefix": "canvaswidgetlayer",
        "body": [
            "type LayerProps = Props",
            "type LayerState = {}",
            "const initialLayerState = {}",
            "",
            "const create${1: Name}Layer = () => {",
            "    const onPaint = (painter: CanvasPainter, props: LayerProps, state: LayerState) => {",
            "",
            "    }",
            "    const onPropsChange = (layer: CanvasWidgetLayer<Props, {}>, props: Props) => {",
            "        $0",
            "    }",
            "    return new CanvasWidgetLayer<LayerProps, LayerState>(onPaint, onPropsChange, initialLayerState)",
            "}"
        ],
        "description": ""
    },
    "usecallback": {
        "prefix": "usecallback",
        "body": [
            "const ${1: callbackName} = useCallback((${2: args}) => {",
            "    $0",
            "}, [${3: dependencies}])"
        ],
        "description": ""
    }
}